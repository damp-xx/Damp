///////////////////////////////////////////////////////////
//  SpritePlayer.cs
//  Implementation of the Class SpritePlayer
//  Generated by Enterprise Architect
//  Created on:      16-apr-2013 11:48:22
//  Original author: Space-Punk
///////////////////////////////////////////////////////////


using System;
using GameState;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using GameState;


namespace Sprites {
	public class SpritePlayer : ISprite, ISpriteAnchor {

	    //Generel Atributes
	    public Vector2 Position { get; set; }
        public Rectangle MyRectangle { get; set; }
	    private Rectangle _sourceRectangle;
	    public Vector2 Velocity { get; set; }
	    public IAnchor _Anchor;
	    private Texture2D _texture; 
	    private int _FrameHeight;
	    private int _FrameWidth;
	    private Vector2 _origin;
        
        //Animation Atributes
        private float _timer; //Timer til at måle tiden som den aktuelle frame på animationern har været vist
        private float _interval = 75; //Interval som er tiden som hvert frame på animationen skal vises
        private int _currentFrame;

        //Moving Atributes
        public int Speed { get; set; }
        public Vector2 Velocety { get { return _velocety; } set { _velocety = value; } }
        private Vector2 _velocety;
        private IKeybordInput _keybordInput;
        public bool _isInAir { get; set; }
	    private float _gravaty = 0.1f;
	    private float _jumpPower = -4.6f; // Kraften som spilleren kan hoppe med
	    private int fallCount =0;
        
        


        public SpritePlayer(Texture2D mTexture2D, Vector2 mPosition, int mFrameHeight, int mFrameWidth, IAnchor mAnchor, IKeybordInput mInput)
        {
            
            _texture = mTexture2D;
            Position = mPosition;
            _FrameHeight = mFrameHeight;
            _FrameWidth = mFrameWidth;
            _Anchor = mAnchor;
            Velocety = new Vector2(0,0);
            _isInAir = true;
            _keybordInput = mInput;

        }

        public void Draw(SpriteBatch spriteBatch)
        {
           spriteBatch.Draw(_texture, MyRectangle, _sourceRectangle, Color.White);
           //spriteBatch.Draw(_texture, MyRectangle, _sourceRectangle, Color.White);

		}

	    public void Update(GameTime time){
            
            _origin = new Vector2(MyRectangle.Width / 2, MyRectangle.Height / 2);
            if (_isInAir == false)
            {
                fallCount++;
                if (_keybordInput.IsJumpPressed)
                {
                    _velocety.Y = _jumpPower;
                    _isInAir = true;
                    fallCount = 0;
                }
                else
                {
                    _velocety.Y = 0.1f;              
                }
            }
            else
            {
                _velocety.Y += _gravaty;
            }
            if (_keybordInput.IsLeftPressed)
            {
                AnimateLeft(time);
            }
            if (_keybordInput.IsRightPressed)
            {
                AnimateRight(time);
            }
	        Position += _velocety;
            if (fallCount > 1/_gravaty)
            {
                fallCount = 0;
                _isInAir = true;
            }
	            

            MyRectangle = new Rectangle((int)Position.X, (int)Position.Y, _FrameWidth, _FrameHeight);
            _sourceRectangle = new Rectangle(_currentFrame * _FrameWidth, 0, _FrameWidth, _FrameHeight);
	    }

	    public void UpdatePosition()
	    {
	        throw new NotImplementedException();
	    }

	    private void AnimateLeft(GameTime gameTime)
        {
            _timer += (float)gameTime.ElapsedGameTime.TotalMilliseconds / 2;
            if (_timer > _interval)
            {
                _currentFrame++;
                _timer = 0;
                
            }
            if (_currentFrame > 7 || _currentFrame < 4 || _isInAir)
            {
                _currentFrame = 4;
            }
        }

        private void AnimateRight(GameTime gameTime)
        {
            _timer += (float)gameTime.ElapsedGameTime.TotalMilliseconds / 2;
            if (_timer > _interval)
            {
                _currentFrame++;
                _timer = 0;
                
            }
            if (_currentFrame > 3 || _isInAir)
            {
                _currentFrame = 0;
            }
        }

	}//end SpritePlayer

}//end namespace Sprites