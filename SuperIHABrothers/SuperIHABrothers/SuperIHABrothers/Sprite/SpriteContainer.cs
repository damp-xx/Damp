///////////////////////////////////////////////////////////
//  SpriteContainer.cs
//  Implementation of the Class SpriteContainer
//  Generated by Enterprise Architect
//  Created on:      16-apr-2013 11:48:21
//  Original author: Space-Punk
///////////////////////////////////////////////////////////


using System.Collections.Generic;
using Microsoft.Xna.Framework;

namespace Sprites {
	public class SpriteContainer : ISpriteContainer, ISpriteContainerCollision {

		public Sprites.IAnchorUpdate _IAnchorUpdate;
		public Sprites.ISprite _ISprite;
	    private List<ISprite> _spriteList;
        List<ISprite> ISpriteContainer.SpriteList { set { _spriteList = value; } }
        public List<ISprite> SpriteList { get { return _spriteList; } }
       
	    private IAnchorUpdate _anchor;


		public SpriteContainer(List<ISprite> mList, IAnchorUpdate mAnchor)
		{
		    _spriteList = mList;
		    _anchor = mAnchor;
		}



		/// 
		/// <param name="mSprite"></param>
		public void AddSprite(ISprite mSprite){
            _spriteList.Add(mSprite);
		}

		/// 
		/// <param name="mSprite"></param>
		public void RemoveSprite(ISprite mSprite)
		{
		    _spriteList.Remove(mSprite);
		}

	    


	    public void Update(GameTime time)
	    {
	        _anchor.Update(time);
	        foreach (var sprite in _spriteList)
	        {
	            sprite.Update(time);
	        }
	    }


	    





	}//end SpriteContainer

}//end namespace Sprites