///////////////////////////////////////////////////////////
//  MessageQueueR.cs
//  Implementation of the Class MessageQueueR
//  Generated by Enterprise Architect
//  Created on:      04-maj-2013 21:51:55
//  Original author: Filip
///////////////////////////////////////////////////////////


using System;
using System.Messaging;
using System.Collections.Generic;
using System.Threading;

namespace ClientCommunication
{
    public class MessageQueueR : IMessageQueueAdd, IMessageQueueRemove
    {
        private MessageQueue _messageQueue = new MessageQueue();
        private Queue<string> queue = new Queue<string>();

        public string GetMessage()
        {
            lock (this)
            {
                //semaphore.Release();
                if (queue.Count > 0)
                {
                    return queue.Dequeue();
                }
                else
                {
                    return null;
                }

                //receivedString = _messageQueue.Receive().ToString();               
            }            
        }

        /// 
        /// <param name="message"></param>
        public void InsertMessage(string message)
        {
            lock (this)
            {
                //semaphore.WaitOne();
                queue.Enqueue(message);
            }
        }

    }

    //end MessageQueueR
}