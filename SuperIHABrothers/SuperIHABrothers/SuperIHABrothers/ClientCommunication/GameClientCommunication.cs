///////////////////////////////////////////////////////////
//  GameClientCommunication.cs
//  Implementation of the Class GameClientCommunication
//  Generated by Enterprise Architect
//  Created on:      04-maj-2013 21:51:53
//  Original author: Filip
///////////////////////////////////////////////////////////


using System.Collections.Generic;
using System.IO;
using System.IO.Pipes;
using System.Threading;

public class GameClientCommunication : ClientCommunication_Game, ClientCommunication_Level {

	private MessageQueue _messageQueue;
	private GameClientProtocol m_GameClientProtocol;
    
    private PipeStream pipeClientIn;
    private PipeStream pipeClientOut;
	
    public GameClientCommunication()
    {
        _messageQueue = new MessageQueue();
    }

	/// 
	/// <param name="pipeIn"></param>
	/// <param name="pipeOut"></param>
	public bool Connect(string pipeIn, string pipeOut){
        
        if (pipeIn != "NOPIPE" && pipeOut != "NOPIPE")
        {
            pipeClientIn = new AnonymousPipeClientStream(PipeDirection.In, pipeIn);
            pipeClientOut = new AnonymousPipeClientStream(PipeDirection.Out, pipeOut);

            Thread myNewThread = new Thread(() => RecieverThread(pipeClientIn, _messageQueue));
            myNewThread.Start();
            return true;
        }
		return false;
	}

	public string Receive()
	{
	    string returnMessage;
	    if ((returnMessage = _messageQueue.GetMessage()) != null) 
	        return returnMessage;
	    else
	        return "NN"; // Nothing New
	}

	/// 
	/// <param name="message"></param>
	public void Send(string message){
        Thread myNewThread = new Thread(() => SenderThread(pipeClientIn, message));
        myNewThread.Start();
	}


    private void RecieverThread(PipeStream pipeClientIn, MessageQueue mMessageQueue)
    {
        for (; ; )
        {
            using (StreamReader sr = new StreamReader(pipeClientIn))
            {
                string receivedString;
                if ((receivedString = sr.ReadLine()) != null) 
                mMessageQueue.InsertMessage(receivedString);
            }
        }
    }


    private void SenderThread(PipeStream pipeClientOut, string message)
    {
        using (StreamWriter sw = new StreamWriter(pipeClientOut))
        {
            sw.AutoFlush = true;
            sw.WriteLine(message);
            pipeClientOut.WaitForPipeDrain();
        }    
    }




}//end GameClientCommunication