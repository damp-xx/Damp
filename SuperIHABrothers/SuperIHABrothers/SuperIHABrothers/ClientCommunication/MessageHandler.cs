///////////////////////////////////////////////////////////
//  MessageHandler.cs
//  Implementation of the Class MessageHandler
//  Generated by Enterprise Architect
//  Created on:      07-maj-2013 09:39:14
//  Original author: Filip
///////////////////////////////////////////////////////////


using System.Threading;
using GameState;
using SuperIHABrothers.Sprite;

namespace ClientCommunication
{
	public class MessageHandler : IMessageHandler {

		private ISpriteContainerMessage _ISpriteContainerMessage;
		private IGameState _IGameState;
		private IMessageQueueRemove _IMessageQueueRemove;
	    private IPlayerData _playerData;

		public MessageHandler(ISpriteContainerMessage spriteContainerMessage, IGameState gameState, IMessageQueueRemove messageQueueRemove, IPlayerData playerData)
		{
		    _ISpriteContainerMessage = spriteContainerMessage;
		    _IGameState = gameState;
		    _IMessageQueueRemove = messageQueueRemove;
		    _playerData = playerData;

            Thread myNewThread = new Thread(() => HandlerThread(_IMessageQueueRemove, _IGameState, _playerData, _ISpriteContainerMessage));
            myNewThread.Start();
		}

        public void SetContainer(ISpriteContainerMessage mContainer)
        {
            _ISpriteContainerMessage = mContainer;
        }

        private void HandlerThread(IMessageQueueRemove messageQueueRemove, IGameState gameState ,IPlayerData playerData, ISpriteContainerMessage containerMessage)
        {
            string message = messageQueueRemove.GetMessage();
            string TypeTag = message.Substring(0,3);
            string Data = message.Substring(3, message.Length-4);
            
            if (message != null)
            {
                switch (TypeTag)
                {
                    case "DOL": // Damp Online
                        gameState.GameRunning = true;
                        break;
                        
                    case "DOF": // Damp Offline
                        gameState.GameRunning = false;
                        break;

                    case "CHS": // Change Highscore
                        playerData.SetHighscore(int.Parse(Data));
                        break;

                    case "CPN": // Change Playername
                        playerData.SetPlayerName(Data);
                        break;

                    case "NAC": // New Achiement
                        //containerMessage.AddSprite(new SpriteAchievement());
                        break;

                    default:
                        //Should never reach this place
                        break;
                }
            }
        }

	   
	}//end MessageHandler

}//end namespace DampCommunication