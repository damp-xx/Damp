///////////////////////////////////////////////////////////
//  MessageHandler.cs
//  Implementation of the Class MessageHandler
//  Generated by Enterprise Architect
//  Created on:      07-maj-2013 09:39:14
//  Original author: Filip
///////////////////////////////////////////////////////////


using System;
using System.Threading;
using GameState;


namespace ClientCommunication
{
    public class MessageHandler
    {
        private IMessageQueueRemove _IMessageQueueRemove;
        private IPlayerData _playerData;

        public MessageHandler( IMessageQueueRemove messageQueueRemove, IPlayerData playerData)
        {
            _IMessageQueueRemove = messageQueueRemove;
            _playerData = playerData;

            Thread myNewThread = new Thread(() => HandlerThread(_IMessageQueueRemove, _playerData));
            myNewThread.Start();
        }

       

        private void HandlerThread(IMessageQueueRemove messageQueueRemove, IPlayerData playerData)
        {
            string message  = messageQueueRemove.GetMessage();        

            if (message != null)
            {
                string TypeTag = message.Substring(0, 3);
                string Data = message.Substring(3, message.Length - 4);

                switch (TypeTag)
                {
                    case "DOL": // Damp Online
                        playerData.GameRunning = true;
                        break;

                    case "DOF": // Damp Offline
                        playerData.GameRunning = false;
                        break;

                    case "CHS": // Change Highscore
                        playerData.Highscore = int.Parse(Data);
                        break;

                    case "CPN": // Change Playername
                        playerData.SetPlayerName(Data);
                        break;

                    case "NAC": // New Achiement
                        //containerMessage.AddSprite(new SpriteAchievement());
                        break;

                    default:
                        //Should never reach this place
                        break;
                }
            }
        }


    }//end MessageHandler

}//end namespace DampCommunication